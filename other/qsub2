#!/usr/bin/env python
"""Submit a command to a compute node via qsub.

Defaults are set up to work well on cheyenne.

Example usage:

   qsubcmd "./myscript --foo bar"

   This will submit myscript with the given arguments

Author: Bill Sacks <sacks@ucar.edu>
"""

from __future__ import print_function
import argparse
import subprocess
import os

class RawDescriptionWithDefaultsFormatter(argparse.ArgumentDefaultsHelpFormatter,
                                          argparse.RawDescriptionHelpFormatter):
    """Gives the benefits of both ArgumentDefaultsHelpFormatter and
    RawDescriptionHelpFormatter
    """
    pass

def commandline_options(description):
    """Process command-line arguments

    Returns an options object holding all parsed options
    """
    parser = argparse.ArgumentParser(
        description=description,
        formatter_class=RawDescriptionWithDefaultsFormatter)

    default_account = os.environ['PROJECT']

    parser.add_argument("-A", "--account", default=default_account,
                        help="Account")

    parser.add_argument("-d", "--num-nodes", type=int, default=1,
                        help="Number of noDes")

    parser.add_argument("-n", "--num-cpus", type=int, default=36,
                        help="Number of CPUs")

    parser.add_argument("-q", "--queue",
                        help="Queue (default depends on whether "
                        "--small is specified: see documentation for "
                        "--small for details)")

    parser.add_argument("-t", "--num-tasks", type=int, default=1,
                        help="Number of MPI Tasks")

    parser.add_argument("-w", "--walltime",
                        help="Walltime (default depends on whether "
                        "--small is specified: see documentation for "
                        "--small for details)")

    parser.add_argument("--extra-qsub-args",
                        default="-l inception=login",
                        help="Extra args to pass to qsub")

    parser.add_argument("--small", action="store_true",
                        help="If specified, use a default walltime of "
                        "30 minutes and a default queue of premium; "
                        "if not specified, use 6 hours and regular. "
                        "(Has no effect if walltime and queue are "
                        "specified explicitly.)")

    parser.add_argument("command",
                        help="Command to run. Must be quoted if the "
                        "command includes arguments.")

    options = parser.parse_args()
    return options

def get_default_walltime(small):
    """Get a default walltime value

    Args:
    - small (bool): whether to use defaults appropriate for small jobs
    """

    if small:
        return "00:30:00"
    else:
        return "06:00:00"

def get_default_queue(small):
    """Get a default queue value

    Args:
    - small (bool): whether to use defaults appropriate for small jobs
    """

    if small:
        return "premium"
    else:
        return "regular"

def build_qsub_command(options):
    """Given the options, build the qsub command
    """

    if options.walltime:
        walltime = options.walltime
    else:
        walltime = get_default_walltime(options.small)

    if options.queue:
        queue = options.queue
    else:
        queue = get_default_queue(options.small)

    select = "select={nodes}:ncpus={cpus}:mpiprocs={tasks}".format(nodes=options.num_nodes,
                                                                   cpus=options.num_cpus,
                                                                   tasks=options.num_tasks)
    extra_qsub_args_list = options.extra_qsub_args.split()
    qsub_cmd = ["qsub",
                "-l", select,
                "-A", options.account,
                "-q", queue,
                "-l", "walltime={}".format(walltime),
                # Write output directly into final destination:
                "-k", "oed",
                # Declare the job non-rerunnable:
                "-r", "n"]
    qsub_cmd.extend(extra_qsub_args_list)

    return qsub_cmd

def _main_func(description):
    options = commandline_options(description)
    qsub_cmd = build_qsub_command(options)
    print("Running: {}".format(' '.join(qsub_cmd)))

    # I'm not sure if we need stdout=subprocess.PIPE, but that's what's
    # done in examples I can find
    qsub_process = subprocess.Popen(qsub_cmd,
                                    stdout=subprocess.PIPE,
                                    stderr=subprocess.PIPE,
                                    stdin=subprocess.PIPE,
                                    universal_newlines=True)
    (out, err) = qsub_process.communicate(options.command)
    if err:
        print("ERROR:\n{}".format(err))
    if out:
        print("OUTPUT:\n{}".format(out))

if __name__ == "__main__":
    _main_func(__doc__)
